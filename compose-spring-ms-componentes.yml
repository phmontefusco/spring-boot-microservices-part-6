version: '3.9'

services:

  ## Eureka Server
  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile.layered  
    image: appms-discovery-server:0.0.1      
    container_name: discovery-server
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
    networks:
      - microservice-network    

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.layered  
    image: appms-application-gateway:0.0.1
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8081:8080"
    expose:
      - "8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - zipkin
      - discovery-server
      - keycloak
#    deploy:
#      resources:
#        limits:
#          memory: 250M
#        reservations:
#          memory: 200M
    networks:
      - microservice-network    

  ## Product-Service Docker Compose Config
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile.layered  
    image: appms-product-service:0.0.1
    container_name: product-service
    #pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongodb
      - discovery-server
      - api-gateway
#    deploy:
#      resources:
#        limits:
#          memory: 250M
#        reservations:
#          memory: 200M
    networks:
      - microservice-network    

  ## Order-Service Docker Compose Config
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile.layered  
    image: appms-order-service:0.0.1
    container_name: order-service
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/order-service
    depends_on:
      - postgresql
      - kafka
      - zipkin
      - discovery-server
      - api-gateway
#    deploy:
#      resources:
#        limits:
#          memory: 250M
#        reservations:
#          memory: 200M
    networks:
      - microservice-network    


  ## Inventory-Service Docker Compose Config
  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile.layered  
    image: appms-inventory-service:0.0.1
    container_name: inventory-service
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/inventory-service
    depends_on:
      - postgresql
      - discovery-server
      - api-gateway
#    deploy:
#      resources:
#        limits:
#          memory: 250M
#        reservations:
#          memory: 200M
    networks:
      - microservice-network    

  ## Notification-Service Docker Compose Config
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile.layered  
    image: appms-notification-service:0.0.1
    container_name: notification-service
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - kafka
      - discovery-server
      - api-gateway
#    deploy:
#      resources:
#        limits:
#          memory: 250M
#        reservations:
#          memory: 200M
    networks:
      - microservice-network    

networks:
  microservice-network:
    #driver: bridge