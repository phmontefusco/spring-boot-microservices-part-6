version: '3.9'

services:

  postgresql:
    image: postgres:15.3
    hostname: postgresql
    container_name: postgresql
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "order-service"
      TZ: "America/Sao_Paulo"
    ports:
      - '5432:5432'
    restart: unless-stopped
    volumes:
      # - '/d/bancodedados/postgresql/inicializacao.sql:/docker-entrypoint-initdb.d/create_tables.sql'
      #- '/Users/phmacos/bancodedados/postgresql:/var/lib/postgresql/data'
      - '/d/bancodedados/postgresql:/var/lib/postgresql/data'
    deploy:
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 30M
    networks:
      - microservice-network
      
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "postgres@email.com"
      PGADMIN_DEFAULT_PASSWORD: "postgres"
      #PGADMIN_LISTEN_PORT: 15432
    ports:
      - "15432:80"
    depends_on:
      - postgresql
    deploy:
      resources:
        limits:
          memory: 150M
        reservations:
          memory: 100M
    networks:
      - microservice-network

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgresql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: postgres
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      TZ: "America/Sao_Paulo"
      KC_LEVEL_LOG: INFO
      KC_HEALTH_ENABLE: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 15s
      timeout: 2s
      retries: 10
    ports:
      - "8080:8080"
    depends_on:
      - postgresql
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    deploy:
      resources:
        limits:
          memory: 500M
        reservations:
          memory: 400M
    command: [ "start-dev", "--import-realm" ]
    networks:
      - microservice-network

  mongodb:
    image: mongo
    restart: always
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INIT_DATABASE: init
    ports:
      - 27017:27017
    volumes:
      #- '/Users/phmacos/bancodedados/mongo:/data/db'
      - '/d/bancodedados/mongo:/data/db'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      retries: 5
      interval: 15s
      start_period: 30s  
    deploy:
      resources:
        limits:
          memory: 110M
        reservations:
          memory: 100M
    networks:
      - microservice-network
      
  mongo-express:
    image: mongo-express
    restart: unless-stopped
    container_name: mongo_ui
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      #ME_CONFIG_MONGODB_SERVER: mongodb
      # Utilize o nome do container name no servername
      # na url vem depois do @
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongodb:27017/
    ports:
      - 8082:8081
    depends_on:
      - mongodb
    deploy:
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 30M
    networks:
      - microservice-network

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
    environment:
      - STORAGE_TYPE=mem
      # Uncomment to disable scribe
      # - SCRIBE_ENABLED=false
      # Uncomment to enable self-tracing
      # - SELF_TRACING_ENABLED=true
      # Uncomment to enable debug logging
      # - JAVA_OPTS=-Dlogging.level.zipkin=DEBUG
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - 9411:9411
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 150M
    networks:
      - microservice-network
      

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper    
    deploy:
      replicas: 1
    volumes:
      - '/d/bancodedados/zookeeper/binami/data:/bitnami/zookeeper'
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_CLIENT_PORT: 2181
      TZ: 'America/Sao_Paulo'
    deploy:
      resources:
        limits:
          memory: 110M
        reservations:
          memory: 100M
    networks:
      - microservice-network      

  kafka:
    image: docker.io/bitnami/kafka:3.5
    container_name: kafka
    ports:
      - "9092:9092"
      #- "29092:29092"
    volumes:
      - '/d/bancodedados/kafka/binami/data:/bitnami'
    environment:
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      #KAFKA_ENABLE_KRAFT: no
      ALLOW_PLAINTEXT_LISTENER: yes
      #KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092,CONTROLLER://:9093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT ,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT     
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      TZ: 'America/Sao_Paulo'
    deploy:
      resources:
        limits:
          memory: 500M
        reservations:
          memory: 400M
    networks:
      - microservice-network      

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - broker
      - zookeeper
    ports:
      - "8086:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=kafka-test
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    deploy:
      resources:
        limits:
          memory: 400M
        reservations:
          memory: 250M
    networks:
      - microservice-network    



networks:
  microservice-network:
    #driver: bridge